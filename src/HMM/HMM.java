/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package HMM;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author RAGHUTEJA
 */
public class HMM extends javax.swing.JFrame {
    
    Object[][] data = null;
    String[] columnnames = new String[2];
    /**
     * Creates new form HMM
     */
    public HMM() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        go = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        sentence = new javax.swing.JTable();
        lpath = new javax.swing.JLabel();
        path = new javax.swing.JTextField();
        lsent = new javax.swing.JLabel();
        sent_input = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        error = new javax.swing.JTextArea();
        lerror = new javax.swing.JLabel();
        pr = new javax.swing.JCheckBox();
        loutput = new javax.swing.JLabel();
        lprecision = new javax.swing.JLabel();
        lrecall = new javax.swing.JLabel();
        lF = new javax.swing.JLabel();
        pvalue = new javax.swing.JTextField();
        rvalue = new javax.swing.JTextField();
        fvalue = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        go.setText("Go");
        go.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goActionPerformed(evt);
            }
        });

        sentence.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Word", "POS"
            }
        ));
        jScrollPane1.setViewportView(sentence);

        lpath.setText("Give path to the Corpus : ");

        path.setText("input.txt");

        lsent.setText("Enter a observation Sentence : ");

        error.setColumns(20);
        error.setRows(3);
        jScrollPane2.setViewportView(error);

        lerror.setText("Error : ");

        pr.setText("precision - recall calculation");

        loutput.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        loutput.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        loutput.setText("Output of Average values: ");

        lprecision.setText("Average Precision value : ");

        lrecall.setText("Average Recall value : ");

        lF.setText("Average F value : ");

        pvalue.setFocusable(false);

        rvalue.setFocusable(false);

        fvalue.setFocusable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lerror)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lpath)
                            .addComponent(lsent))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(path, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                            .addComponent(sent_input)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pr)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(go, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lprecision)
                            .addComponent(lrecall)
                            .addComponent(lF))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pvalue)
                            .addComponent(fvalue)
                            .addComponent(rvalue)))
                    .addComponent(loutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lpath)
                            .addComponent(path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lsent)
                            .addComponent(sent_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(pr))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(go)))
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(lerror)))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(loutput)
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lprecision)
                            .addComponent(pvalue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lrecall)
                            .addComponent(rvalue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lF)
                            .addComponent(fvalue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(125, 125, 125)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     *  This function will clean the fields.
     */
    public void clean() {
        error.setText("");
        pvalue.setText("");
        rvalue.setText("");
        fvalue.setText("");
        columnnames = new String[] {"Word","POS"};
        data = (Object[][]) new Object[20][2];
        int j = 0;
        while(j < 20) {
            data[j][1] = "";
            data[j][0] = "";
            j++;
        }
        sentence.setModel(new DefaultTableModel(data,columnnames));
    }
    
    private void goActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goActionPerformed
        // TODO add your handling code here:
        clean();
        if(pr.isSelected()){
            String fileName = path.getText();// "input.txt";
            Precision_Recall precall = new Precision_Recall(fileName);
            float[][] output;

            FileReader file = null;
            try {
                
            } catch (Exception e) {
                error.setText("Entered File not found (OR) \n Entered input words may not found in corpus");
    //            throw new RuntimeException(e);
            } finally {
                if (file != null) {
                    try {
                        file.close();
                    } catch (IOException e) {
            // Ignore issues during closing 
                    }
                }
            }            
            
            try {
                
                FileInputStream fstream = new FileInputStream(fileName);
                DataInputStream in = new DataInputStream(fstream);
                BufferedReader br = new BufferedReader(new InputStreamReader(in));
                String line = "";
                while ((line = br.readLine()) != null)   {
                }
//                table.printtable();
                in.close();
    //            System.out.println(output);
                
                output = precall.PR();
                
                int size = output[0].length;
                for(int i=0; i<size; i++){
                    System.out.println(output[0][i] + "," + output[1][i] + "," + output[2][i]);
                }
                
                columnnames = new String[] {"Index","P Value","R Value","F Value"};
                data = (Object[][]) new Object[size-1][4];
                for(int i=0; i<size-1; i++){
                    data[i][0] = i+1;
                    data[i][1] = output[0][i];
                    data[i][2] = output[1][i];
                    data[i][3] = output[2][i];
                }
                sentence.setModel(new DefaultTableModel(data,columnnames));
                pvalue.setText(String.valueOf(output[0][size-1]));
                rvalue.setText(String.valueOf(output[1][size-1]));
                fvalue.setText(String.valueOf(output[2][size-1]));
                
            }
            catch (FileNotFoundException ex) {
                error.setText("Entered File not found (OR) \n Entered input words may not found in corpus");
                Logger.getLogger(HMM.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                error.setText("Entered File not found (OR) \n Entered input words may not found in corpus");
                Logger.getLogger(HMM.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } else {
            String fileName = path.getText();// "input.txt";
            String main_input = sent_input.getText();// "Did you know";
            float states[][] = new float[5][5];
            float start_state[] = new float[5];
            for(int i=0; i<5; i++){
                for(int j=0; j<5; j++){
                    states[i][j] = 0;
                }
                start_state[i] = 0;
            }
            hashtable table = new hashtable();
            FileReader file = null;
            try {
                FileInputStream fstream = new FileInputStream(fileName);
                DataInputStream in = new DataInputStream(fstream);
                BufferedReader br = new BufferedReader(new InputStreamReader(in));
                String line = "";
                while ((line = br.readLine()) != null)   {
                    String[] input;
                    input = line.split(" ");
                    char last = input[0].charAt(input[0].length()-1);
                    String remaining = input[0].substring(0, input[0].length() - 2);
                    int code = -1;
                    if((last == 'N') || (last == 'n')) code = 0;
                    else if((last == 'V') || (last == 'v')) code = 1;
                    else if((last == 'A') || (last == 'a')) code = 2;
                    else if((last == 'R') || (last == 'r')) code = 3;
                    else if((last == 'O') || (last == 'o')) code = 4;
                    table.insert(remaining, code);
                    start_state[code] = start_state[code] + 1;
                    int prev_code = code;
                    for(int i=1; i<input.length; i++){
                        last = input[i].charAt(input[i].length()-1);
                        remaining = input[i].substring(0, input[i].length() - 2);
                        code = -1;
                        if((last == 'N') || (last == 'n')) code = 0;
                        else if((last == 'V') || (last == 'v')) code = 1;
                        else if((last == 'A') || (last == 'a')) code = 2;
                        else if((last == 'R') || (last == 'r')) code = 3;
                        else if((last == 'O') || (last == 'o')) code = 4;
                        table.insert(remaining, code);
                        states[prev_code][code] = states[prev_code][code] + 1;
                        prev_code = code;
                    }
                }
//                table.printtable();
                in.close();
                for(int i=0; i<5; i++){
                    float sum = 0;
                    for(int j=0; j<5; j++){
                        sum = sum + states[i][j];
                    }
                    for(int j=0; j<5; j++){
                        states[i][j] = states[i][j]/sum;
                    }
                }
                float sum = 0;
                for(int i=0; i<5; i++){
                    sum = sum + start_state[i];
                }
                for(int i=0; i<5; i++){
                    start_state[i] = start_state[i]/sum;
                }

                table.complete_insertion();

    //            table.printtable();
                HMM_main main = new HMM_main(states,start_state,table);
        //            System.out.println(table.find("know", 4));

                String output = main.viterbi(main_input);
                System.out.println(output);
                String[] output_temp;
                output_temp = output.split("#");
                if(output_temp.length == 1){
                    error.setText(output);
                }
                else {
                    columnnames = new String[] {"Word","POS"};
                    data = (Object[][]) new Object[(output_temp.length)/2][2];
                    int j = 0,i = output_temp.length-1;
                    while(i >=0) {
                        data[j][1] = output_temp[i];i--;
                        data[j][0] = output_temp[i];i--;
                        j++;
                    }
                    sentence.setModel(new DefaultTableModel(data,columnnames));
                }

    //            System.out.println(output);
            } catch (Exception e) {
                error.setText("Entered File not found (OR) \n Entered input words may not found in corpus");
    //            throw new RuntimeException(e);
            } finally {
                if (file != null) {
                    try {
                        file.close();
                    } catch (IOException e) {
            // Ignore issues during closing 
                    }
                }
            }            
        }
        
    }//GEN-LAST:event_goActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HMM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HMM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HMM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HMM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HMM().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea error;
    private javax.swing.JTextField fvalue;
    private javax.swing.JButton go;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lF;
    private javax.swing.JLabel lerror;
    private javax.swing.JLabel loutput;
    private javax.swing.JLabel lpath;
    private javax.swing.JLabel lprecision;
    private javax.swing.JLabel lrecall;
    private javax.swing.JLabel lsent;
    private javax.swing.JTextField path;
    private javax.swing.JCheckBox pr;
    private javax.swing.JTextField pvalue;
    private javax.swing.JTextField rvalue;
    private javax.swing.JTextField sent_input;
    private javax.swing.JTable sentence;
    // End of variables declaration//GEN-END:variables
}
